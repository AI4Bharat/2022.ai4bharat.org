# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  post(relativePath: String): Post!
  postConnection(before: String, after: String, first: Float, last: Float, sort: String): PostConnection!
  global(relativePath: String): Global!
  globalConnection(before: String, after: String, first: Float, last: Float, sort: String): GlobalConnection!
  author(relativePath: String): Author!
  authorConnection(before: String, after: String, first: Float, last: Float, sort: String): AuthorConnection!
  page(relativePath: String): Page!
  pageConnection(before: String, after: String, first: Float, last: Float, sort: String): PageConnection!
  area(relativePath: String): Area!
  areaConnection(before: String, after: String, first: Float, last: Float, sort: String): AreaConnection!
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String): DocumentConnection!
}

union DocumentNode = Post | Global | Author | Page | Area

union PostAuthor = Author

type Post implements Node & Document {
  title: String
  heroImg: String
  excerpt: JSON
  author: PostAuthor
  _body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

type PostConnectionEdges {
  cursor: String!
  node: Post
}

type PostConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PostConnectionEdges]
}

type GlobalHeaderIcon {
  color: String
  style: String
  name: String
}

type GlobalHeaderNav {
  href: String
  label: String
}

type GlobalHeaderAreasIcon {
  color: String
  style: String
  name: String
}

type GlobalHeaderAreas {
  href: String
  label: String
  icon: GlobalHeaderAreasIcon
  description: String
  comingSoon: Boolean
  updated: Boolean
}

type GlobalHeaderResourcesIcon {
  color: String
  style: String
  name: String
}

type GlobalHeaderResources {
  href: String
  label: String
  icon: GlobalHeaderResourcesIcon
  description: String
}

type GlobalHeader {
  icon: GlobalHeaderIcon
  color: String
  nav: [GlobalHeaderNav]
  areas: [GlobalHeaderAreas]
  resources: [GlobalHeaderResources]
}

type GlobalFooterSocial {
  map: String
  facebook: String
  twitter: String
  linkedin: String
  github: String
}

type GlobalFooter {
  color: String
  social: GlobalFooterSocial
}

type GlobalTheme {
  color: String
  font: String
  icon: String
}

type Global implements Node & Document {
  header: GlobalHeader
  footer: GlobalFooter
  theme: GlobalTheme
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

type GlobalConnectionEdges {
  cursor: String!
  node: Global
}

type GlobalConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [GlobalConnectionEdges]
}

type Author implements Node & Document {
  name: String
  avatar: String
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

type AuthorConnectionEdges {
  cursor: String!
  node: Author
}

type AuthorConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [AuthorConnectionEdges]
}

type PageBlocksHeroActions {
  label: String
  type: String
  icon: Boolean
  link: String
}

type PageBlocksHeroImage {
  src: String
  alt: String
}

type PageBlocksHero {
  tagline: String
  headline: String
  text: JSON
  actions: [PageBlocksHeroActions]
  image: PageBlocksHeroImage
  color: String
}

type PageBlocksFeaturesItemsIcon {
  color: String
  style: String
  name: String
}

type PageBlocksFeaturesItems {
  icon: PageBlocksFeaturesItemsIcon
  title: String
  link: String
  text: String
}

type PageBlocksFeatures {
  items: [PageBlocksFeaturesItems]
  color: String
}

type PageBlocksFeaturesAltItemsIcon {
  color: String
  style: String
  name: String
}

type PageBlocksFeaturesAltItems {
  icon: PageBlocksFeaturesAltItemsIcon
  title: String
  link: String
  comingSoon: Boolean
  updated: Boolean
  text: String
}

type PageBlocksFeaturesAlt {
  items: [PageBlocksFeaturesAltItems]
  color: String
}

type PageBlocksFeaturesAlt2ItemsIcon {
  color: String
  style: String
  name: String
}

type PageBlocksFeaturesAlt2Items {
  icon: PageBlocksFeaturesAlt2ItemsIcon
  title: String
  link: String
  text: String
}

type PageBlocksFeaturesAlt2 {
  items: [PageBlocksFeaturesAlt2Items]
  color: String
}

type PageBlocksCardGrid2Items {
  title: String
  image: String
  link: String
  text: String
}

type PageBlocksCardGrid2 {
  items: [PageBlocksCardGrid2Items]
  color: String
}

type PageBlocksContent {
  body: JSON
  color: String
}

type PageBlocksVideoCarouselVideoDetails {
  title: String
  embedCode: String
}

type PageBlocksVideoCarousel {
  videoDetails: [PageBlocksVideoCarouselVideoDetails]
  color: String
}

type PageBlocksTestimonial {
  quote: String
  author: String
  color: String
}

type PageBlocksFlatCardsGridItemsIcon {
  color: String
  style: String
  name: String
}

type PageBlocksFlatCardsGridItemsChip {
  color: String
  style: String
  text: String
}

type PageBlocksFlatCardsGridItems {
  icon: PageBlocksFlatCardsGridItemsIcon
  chip: PageBlocksFlatCardsGridItemsChip
  title: String
  link: String
  text: String
  iconShown: Boolean
  iconColor: String
}

type PageBlocksFlatCardsGrid {
  title: String
  header: String
  description: String
  items: [PageBlocksFlatCardsGridItems]
  highlightColor: String
  color: String
}

type PageBlocksBanner {
  title: String
  header: String
  description: String
  highlightColor: String
  color: String
}

type PageBlocksFaq {
  title: String
  content: String
  color: String
}

type PageBlocksQuote {
  quoteContent: String
  author: String
  color: String
}

type PageBlocksTeamCardsGridItemsIcon {
  color: String
  style: String
  name: String
}

type PageBlocksTeamCardsGridItemsPersonImage {
  src: String
  alt: String
}

type PageBlocksTeamCardsGridItems {
  icon: PageBlocksTeamCardsGridItemsIcon
  personName: String
  personDesignation: String
  personImage: PageBlocksTeamCardsGridItemsPersonImage
  personDescription: String
}

type PageBlocksTeamCardsGrid {
  items: [PageBlocksTeamCardsGridItems]
  color: String
}

type PageBlocksPhotoCardsGrid2Items {
  title: String
  image: String
  link: String
  text: String
}

type PageBlocksPhotoCardsGrid2 {
  items: [PageBlocksPhotoCardsGrid2Items]
  color: String
}

type PageBlocksPhotoCardSingleItems {
  title: String
  image: String
  link: String
  text: String
}

type PageBlocksPhotoCardSingle {
  items: [PageBlocksPhotoCardSingleItems]
  color: String
}

type PageBlocksJobCardsGridItemsIcon {
  color: String
  style: String
  name: String
}

type PageBlocksJobCardsGridItems {
  icon: PageBlocksJobCardsGridItemsIcon
  title: String
  link: String
  duration: String
  jobType: String
  description: String
}

type PageBlocksJobCardsGrid {
  items: [PageBlocksJobCardsGridItems]
  color: String
}

type PageBlocksPdfEmbed {
  title: String
  header: String
  description: String
  url: String
  color: String
}

type PageBlocksTable {
  markdownTable: String
  markupTable: String
  color: String
}

union PageBlocks = PageBlocksHero | PageBlocksFeatures | PageBlocksFeaturesAlt | PageBlocksFeaturesAlt2 | PageBlocksCardGrid2 | PageBlocksContent | PageBlocksVideoCarousel | PageBlocksTestimonial | PageBlocksFlatCardsGrid | PageBlocksBanner | PageBlocksFaq | PageBlocksQuote | PageBlocksTeamCardsGrid | PageBlocksPhotoCardsGrid2 | PageBlocksPhotoCardSingle | PageBlocksJobCardsGrid | PageBlocksPdfEmbed | PageBlocksTable

type Page implements Node & Document {
  blocks: [PageBlocks]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

type PageConnectionEdges {
  cursor: String!
  node: Page
}

type PageConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PageConnectionEdges]
}

union AreaAuthor = Author

type Area implements Node & Document {
  title: String
  heroImg: String
  excerpt: JSON
  author: AreaAuthor
  date: String
  _body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

type AreaConnectionEdges {
  cursor: String!
  node: Area
}

type AreaConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [AreaConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updatePost(relativePath: String!, params: PostMutation!): Post!
  createPost(relativePath: String!, params: PostMutation!): Post!
  updateGlobal(relativePath: String!, params: GlobalMutation!): Global!
  createGlobal(relativePath: String!, params: GlobalMutation!): Global!
  updateAuthor(relativePath: String!, params: AuthorMutation!): Author!
  createAuthor(relativePath: String!, params: AuthorMutation!): Author!
  updatePage(relativePath: String!, params: PageMutation!): Page!
  createPage(relativePath: String!, params: PageMutation!): Page!
  updateArea(relativePath: String!, params: AreaMutation!): Area!
  createArea(relativePath: String!, params: AreaMutation!): Area!
}

input DocumentMutation {
  post: PostMutation
  global: GlobalMutation
  author: AuthorMutation
  page: PageMutation
  area: AreaMutation
}

input PostMutation {
  title: String
  heroImg: String
  excerpt: JSON
  author: String
  _body: JSON
}

input GlobalHeaderIconMutation {
  color: String
  style: String
  name: String
}

input GlobalHeaderNavMutation {
  href: String
  label: String
}

input GlobalHeaderAreasIconMutation {
  color: String
  style: String
  name: String
}

input GlobalHeaderAreasMutation {
  href: String
  label: String
  icon: GlobalHeaderAreasIconMutation
  description: String
  comingSoon: Boolean
  updated: Boolean
}

input GlobalHeaderResourcesIconMutation {
  color: String
  style: String
  name: String
}

input GlobalHeaderResourcesMutation {
  href: String
  label: String
  icon: GlobalHeaderResourcesIconMutation
  description: String
}

input GlobalHeaderMutation {
  icon: GlobalHeaderIconMutation
  color: String
  nav: [GlobalHeaderNavMutation]
  areas: [GlobalHeaderAreasMutation]
  resources: [GlobalHeaderResourcesMutation]
}

input GlobalFooterSocialMutation {
  map: String
  facebook: String
  twitter: String
  linkedin: String
  github: String
}

input GlobalFooterMutation {
  color: String
  social: GlobalFooterSocialMutation
}

input GlobalThemeMutation {
  color: String
  font: String
  icon: String
}

input GlobalMutation {
  header: GlobalHeaderMutation
  footer: GlobalFooterMutation
  theme: GlobalThemeMutation
}

input AuthorMutation {
  name: String
  avatar: String
}

input PageBlocksHeroActionsMutation {
  label: String
  type: String
  icon: Boolean
  link: String
}

input PageBlocksHeroImageMutation {
  src: String
  alt: String
}

input PageBlocksHeroMutation {
  tagline: String
  headline: String
  text: JSON
  actions: [PageBlocksHeroActionsMutation]
  image: PageBlocksHeroImageMutation
  color: String
}

input PageBlocksFeaturesItemsIconMutation {
  color: String
  style: String
  name: String
}

input PageBlocksFeaturesItemsMutation {
  icon: PageBlocksFeaturesItemsIconMutation
  title: String
  link: String
  text: String
}

input PageBlocksFeaturesMutation {
  items: [PageBlocksFeaturesItemsMutation]
  color: String
}

input PageBlocksFeaturesAltItemsIconMutation {
  color: String
  style: String
  name: String
}

input PageBlocksFeaturesAltItemsMutation {
  icon: PageBlocksFeaturesAltItemsIconMutation
  title: String
  link: String
  comingSoon: Boolean
  updated: Boolean
  text: String
}

input PageBlocksFeaturesAltMutation {
  items: [PageBlocksFeaturesAltItemsMutation]
  color: String
}

input PageBlocksFeaturesAlt2ItemsIconMutation {
  color: String
  style: String
  name: String
}

input PageBlocksFeaturesAlt2ItemsMutation {
  icon: PageBlocksFeaturesAlt2ItemsIconMutation
  title: String
  link: String
  text: String
}

input PageBlocksFeaturesAlt2Mutation {
  items: [PageBlocksFeaturesAlt2ItemsMutation]
  color: String
}

input PageBlocksCardGrid2ItemsMutation {
  title: String
  image: String
  link: String
  text: String
}

input PageBlocksCardGrid2Mutation {
  items: [PageBlocksCardGrid2ItemsMutation]
  color: String
}

input PageBlocksContentMutation {
  body: JSON
  color: String
}

input PageBlocksVideoCarouselVideoDetailsMutation {
  title: String
  embedCode: String
}

input PageBlocksVideoCarouselMutation {
  videoDetails: [PageBlocksVideoCarouselVideoDetailsMutation]
  color: String
}

input PageBlocksTestimonialMutation {
  quote: String
  author: String
  color: String
}

input PageBlocksFlatCardsGridItemsIconMutation {
  color: String
  style: String
  name: String
}

input PageBlocksFlatCardsGridItemsChipMutation {
  color: String
  style: String
  text: String
}

input PageBlocksFlatCardsGridItemsMutation {
  icon: PageBlocksFlatCardsGridItemsIconMutation
  chip: PageBlocksFlatCardsGridItemsChipMutation
  title: String
  link: String
  text: String
  iconShown: Boolean
  iconColor: String
}

input PageBlocksFlatCardsGridMutation {
  title: String
  header: String
  description: String
  items: [PageBlocksFlatCardsGridItemsMutation]
  highlightColor: String
  color: String
}

input PageBlocksBannerMutation {
  title: String
  header: String
  description: String
  highlightColor: String
  color: String
}

input PageBlocksFaqMutation {
  title: String
  content: String
  color: String
}

input PageBlocksQuoteMutation {
  quoteContent: String
  author: String
  color: String
}

input PageBlocksTeamCardsGridItemsIconMutation {
  color: String
  style: String
  name: String
}

input PageBlocksTeamCardsGridItemsPersonImageMutation {
  src: String
  alt: String
}

input PageBlocksTeamCardsGridItemsMutation {
  icon: PageBlocksTeamCardsGridItemsIconMutation
  personName: String
  personDesignation: String
  personImage: PageBlocksTeamCardsGridItemsPersonImageMutation
  personDescription: String
}

input PageBlocksTeamCardsGridMutation {
  items: [PageBlocksTeamCardsGridItemsMutation]
  color: String
}

input PageBlocksPhotoCardsGrid2ItemsMutation {
  title: String
  image: String
  link: String
  text: String
}

input PageBlocksPhotoCardsGrid2Mutation {
  items: [PageBlocksPhotoCardsGrid2ItemsMutation]
  color: String
}

input PageBlocksPhotoCardSingleItemsMutation {
  title: String
  image: String
  link: String
  text: String
}

input PageBlocksPhotoCardSingleMutation {
  items: [PageBlocksPhotoCardSingleItemsMutation]
  color: String
}

input PageBlocksJobCardsGridItemsIconMutation {
  color: String
  style: String
  name: String
}

input PageBlocksJobCardsGridItemsMutation {
  icon: PageBlocksJobCardsGridItemsIconMutation
  title: String
  link: String
  duration: String
  jobType: String
  description: String
}

input PageBlocksJobCardsGridMutation {
  items: [PageBlocksJobCardsGridItemsMutation]
  color: String
}

input PageBlocksPdfEmbedMutation {
  title: String
  header: String
  description: String
  url: String
  color: String
}

input PageBlocksTableMutation {
  markdownTable: String
  markupTable: String
  color: String
}

input PageBlocksMutation {
  hero: PageBlocksHeroMutation
  features: PageBlocksFeaturesMutation
  featuresAlt: PageBlocksFeaturesAltMutation
  featuresAlt2: PageBlocksFeaturesAlt2Mutation
  cardGrid2: PageBlocksCardGrid2Mutation
  content: PageBlocksContentMutation
  videoCarousel: PageBlocksVideoCarouselMutation
  testimonial: PageBlocksTestimonialMutation
  flatCardsGrid: PageBlocksFlatCardsGridMutation
  banner: PageBlocksBannerMutation
  faq: PageBlocksFaqMutation
  quote: PageBlocksQuoteMutation
  teamCardsGrid: PageBlocksTeamCardsGridMutation
  photoCardsGrid2: PageBlocksPhotoCardsGrid2Mutation
  photoCardSingle: PageBlocksPhotoCardSingleMutation
  jobCardsGrid: PageBlocksJobCardsGridMutation
  pdfEmbed: PageBlocksPdfEmbedMutation
  table: PageBlocksTableMutation
}

input PageMutation {
  blocks: [PageBlocksMutation]
}

input AreaMutation {
  title: String
  heroImg: String
  excerpt: JSON
  author: String
  date: String
  _body: JSON
}

schema {
  query: Query
  mutation: Mutation
}
  